Page choose_1of2_page
{
    char        key1;           // key for response 1
    char        key2;           // key for response 2
    char        altkey1;        // alternate key for response 1
    char        altkey2;        // alternate key for response 2


    init()
    {
        fill_pattern_color = INPUT_PAGE_COLOR;
    }


    on_event:key_press()
    {
        if (input_key == key1 || input_key == altkey1)
            response.process_hit(1, event_time);
        else if (input_key == key2 || input_key == altkey2)
            response.process_hit(2, event_time);
        else
            handle_special_key(this, input_key, input_modifiers);
    }

    on_event:message()
    {
        // Process button-box message. See setup() below.
        response.process_hit(message_arg, event_time);
    }

    VerticalLayout layout
    {
        init()
        {
            spacing = 50;
            height = 0;     // 0 means as large as possible
        }

        time start_feedback(int val)
        {
            if(val == 1)
                canvas.leftcolor.height = canvas.leftcolor.height/2;
            if(val == 2)
                canvas.rightcolor.height = canvas.rightcolor.height/2;

            feedback_reset.start(now() + VISUAL_FEEDBACK_DURATION);
            return feedback_reset.expected_expire_time;
        }

        Timer feedback_reset
        {
            on_event:expire()
            {
                canvas.leftcolor.set();
                canvas.rightcolor.set();
            }
        }

        CanvasGadget canvas
        {
            init()
            {
                fill_pattern_color = TEST_PAGE_STIMULUS_COLOR;
                size = 420, 100;
                offset_x = width / 2;
//                offset_x = 40;
                offset_y = height / 2;
            }


            TextShape stimulus
            {
                init()
                {
                    text = QUESTION_TEXT;
                    font_family = TEST_PAGE_STIMULUS_FONT_FAMILY;
                    font_size = TEST_PAGE_STIMULUS_FONT_SIZE*1.5;
                    line_pattern_color = TEST_PAGE_STIMULUS_TEXT_COLOR;
                    hor_alignment = ALIGN_CENTER;
                    ver_alignment = ALIGN_CENTER;
                    is_visible = true;
                }
            }

            RectangleShape leftcolor
            {
                init()
                {
                    set();
                }

                void set()
                {
                    fill_pattern_color = color:green;
                    x = -canvas.width/2;
                    y = -canvas.height/2;
                    height = canvas.height;
                    width = 10;
                    is_visible = true;
                }
            }

            RectangleShape rightcolor
            {
                init()
                {
                    set();
                }
                
                void set()
                {
                    fill_pattern_color = color:red;
                    x = (canvas.width/2)-10;
                    y = -canvas.height/2;
                    height = canvas.height;
                    width = 10;
                    is_visible = true;
                }
            }
        }
    }

    Response response
    {
        int     goodvalue;      // correct answer to question (0 if n.a.)
        int     value;          // response value: 1..2 (0 on timeout)
        int     rt;             // response time [ms]
        bool    correct;        // true if correct answer given (if applicable)


        void clear()
        {
            goodvalue = 0;
            value = 0;
            rt = -9999;
            correct = false;
        }


        void process_hit(int val, time t)
        {
            if (hit(t) == HIT_VALID)
            {
                value = val;
                rt = int(reaction_time(0));
                correct = val == goodvalue;

                ignore_remaining_hits();

                time feedback_finish_time = layout.start_feedback(val);
                stop(feedback_finish_time);
            }
        }


        on_event:finish()
        {
            done(CONTINUE);
        }
    }

     // Performs cleaning up if necessary.
    void cleanup()
    {
        test_page_overlay.cleanup();

        control.button_box.disable_buttons();
        control.target = null;
    }

     void setup(int count = -1, int ntrials=-1, bool pr=false)
    {
        test_page_overlay.setup(this);

        // Show or hide prompt.
        test_page_overlay.show_prompt(pr ? 
            PRACTICE_OVERLAY_PROMT_TEXT2 : "");

        // Enable or disable the progress bar.
        test_page_overlay.show_progress_bar(ntrials);   // disabled if < 0

        // Update progress counter (if enabled).
        test_page_overlay.update_progress_bar(count);

        // Enable button-box buttons.
        control.target = this;
        control.button_box.disable_buttons();
        control.button_box.enable_button(0,1);
        control.button_box.enable_button(2,2);
    }

    void done(int msgid)
    {
        signal_target(msgid);   // Tell caller we're done.
        target = null;

        if(control.target == this)
        {
            control.target = null;
            control.button_box.disable_buttons();
        }
    }


    //==========================================================================

    void set_keys(char k1, char k2)
    {
        key1 = k1;
        key2 = k2;
    }


    void set_alternate_keys(char k1, char k2)
    {
        altkey1 = k1;
        altkey2 = k2;
    }


    void action(Object caller, int correct=0, dur timeout=0s, 
        dur showdelay=-1s, dur fadedur=-1s)
    {
        response.clear();
        response.goodvalue = correct;

        if (test_window1.show_page(this, now()) == 0)
        {
            // Page not yet shown. Let response period begin when the page 
            // is fully visible (fade-in has finished).
            response.start(expected_transition_finish_time, timeout);
        }
        else
        {
            // Page already shown. Let response period begin immediately.
            response.start(now(), timeout);
        }

        target = caller;

        test_window1.activate();
    }


    void stop_action()
    {
        response.abort();
        target = null;
    }
}
