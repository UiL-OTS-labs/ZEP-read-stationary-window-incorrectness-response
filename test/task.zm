//requires 1.10;

import defs;
import stimuli;
import shuffle;
import output;
import test_page;
import choose_1of2_page;

Block task
{
    on_event:entry()
    {
            // Randomize test items table.
            if (shuffle_test_items() != OK) terminate;
    }


    Part instructions
    {
        on_event:entry()
        {
//            pause_page.set_text_size(1000, 600);
            pause_page.set_text(INSTRUCTION_TEXT,
                true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }


    Block practice
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            num_cycles = prac_items.size;
        }


        on_event:exit()
        {
            test_page.cleanup();
            choose_1of2_page.cleanup();
        }


        Trial trial
        {
            on_event:entry()
            {
                // Prepare test page: progress bar and prompt enabled.
                test_page.setup(practice.cycle, practice.num_cycles, true);

                item = prac_items[practice.cycle];
            }


            SubTrial presentation
            {
                on_event:entry()
                {
                    test_page.action(this, item, reference_time);
                }
            }

            SubTrial question
            {
                on_event:entry()
                {
                    choose_1of2_page.setup( practice.cycle, practice.num_cycles, false);
                    choose_1of2_page.set_keys(KEY_Shift_L, KEY_Shift_R);
                    choose_1of2_page.action(this, item.qanswer ? 1 : 2);
                }
            }
        }
    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


    Part pause
    {
        on_event:entry()
        {
            pause_page.set_text(
              END_OF_PRACTICE_TEXT,
                true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }


    Block test
    {
        TestItem        item;   // current item
        TestOutput      output; // current output table row


        on_event:entry()
        {
            num_cycles = test_items.size;
        }


        on_event:exit()
        {
            test_page.cleanup();
            choose_1of2_page.cleanup();

            // Save test output table as CSV file.
            test_output_save();
        }

        void reset_output()
        {
            TestOutput temp_output; 
            output = temp_output;
        }

        Trial trial
        {
            on_event:entry()
            {
                // Prepare test page: progress bar enabled, prompt disabled.
                test_page.setup(test.cycle, test.num_cycles, false);

                item = test_items[test.cycle];
                
                reset_output();
                output.trialnum = test.cycle + 1;
                output.id = item.id;
                output.rt = -9999;
                output.type = item.type;
                output.q_expected_answer = item.qanswer;
                
                output.num_valid_hits = 0;
                
                output.qcorrect = -1;
                output.segments = item.segments;
            }


            on_event:exit()
            {
                // Add new row to test output table.
                test_output_append(output);
            }


            SubTrial presentation
            {
                on_event:entry()
                {
                    test_page.action(this, item, reference_time);
                }


                on_event:exit()
                {
                    output.rt = test_page.response.rt[1];
                    output.num_valid_hits = test_page.response.num_valid_hits;
                }
            }

            SubTrial question
            {
                on_event:entry()
                {
                    choose_1of2_page.setup(test.cycle, test.num_cycles, false);
                    choose_1of2_page.set_keys(KEY_Shift_L, KEY_Shift_R);
                    choose_1of2_page.action(this, item.qanswer ? 1 : 2);
                }

                on_event:exit()
                {
                    output.qcorrect = choose_1of2_page.response.correct;
                }
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}
